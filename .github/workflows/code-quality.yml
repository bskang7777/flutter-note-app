name: Code Quality

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  schedule:
    - cron: '0 0 * * 0'  # 매주 일요일 자정에 실행

jobs:
  code-quality:
    runs-on: ubuntu-latest
    name: Code Quality Analysis
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
        
    - name: Setup Flutter
      uses: subosito/flutter-action@v2
      with:
        flutter-version: '3.19.0'
        channel: 'stable'
        cache: true
        
    - name: Install dependencies
      run: flutter pub get
      
    - name: Check formatting
      run: |
        echo "::group::Dart Format Check"
        dart format --output=none --set-exit-if-changed .
        echo "::endgroup::"
        
    - name: Analyze code
      run: |
        echo "::group::Flutter Analyze"
        flutter analyze --fatal-infos --fatal-warnings
        echo "::endgroup::"
        
    - name: Check for unused dependencies
      run: |
        echo "::group::Dependency Analysis"
        flutter pub deps --json > deps.json
        echo "Dependencies analysis completed"
        echo "::endgroup::"
        
    - name: Run tests with coverage
      run: |
        echo "::group::Test Coverage"
        flutter test --coverage --reporter=json > test_results.json
        echo "::endgroup::"
        
    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      if: success()
      with:
        file: coverage/lcov.info
        fail_ci_if_error: false
        verbose: true
        
    - name: Generate test report
      if: always()
      run: |
        echo "## 🧪 테스트 결과" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        if [ -f test_results.json ]; then
          echo "✅ 테스트 실행 완료" >> $GITHUB_STEP_SUMMARY
        else
          echo "❌ 테스트 실행 실패" >> $GITHUB_STEP_SUMMARY
        fi
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "## 📊 코드 품질" >> $GITHUB_STEP_SUMMARY
        echo "- 코드 포맷팅: ✅ 통과" >> $GITHUB_STEP_SUMMARY
        echo "- 정적 분석: ✅ 통과" >> $GITHUB_STEP_SUMMARY
        echo "- 의존성 검사: ✅ 통과" >> $GITHUB_STEP_SUMMARY
        
  security-scan:
    runs-on: ubuntu-latest
    name: Security Scan
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        scan-type: 'fs'
        scan-ref: '.'
        format: 'sarif'
        output: 'trivy-results.sarif'
        
    - name: Upload Trivy scan results to GitHub Security tab
      uses: github/codeql-action/upload-sarif@v2
      if: always()
      with:
        sarif_file: 'trivy-results.sarif'
        
  dependency-review:
    runs-on: ubuntu-latest
    name: Dependency Review
    if: github.event_name == 'pull_request'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Dependency Review
      uses: actions/dependency-review-action@v3
      with:
        comment-summary-in-pr: always
        fail-on-severity: moderate
        
  performance-test:
    runs-on: ubuntu-latest
    name: Performance Test
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Flutter
      uses: subosito/flutter-action@v2
      with:
        flutter-version: '3.19.0'
        channel: 'stable'
        cache: true
        
    - name: Install dependencies
      run: flutter pub get
      
    - name: Enable web support
      run: flutter config --enable-web
      
    - name: Build web app for performance test
      run: flutter build web --release --web-renderer html
      
    - name: Setup Node.js for Lighthouse
      uses: actions/setup-node@v3
      with:
        node-version: '18'
        
    - name: Install Lighthouse CI
      run: npm install -g @lhci/cli
      
    - name: Serve app and run Lighthouse
      run: |
        npx http-server build/web -p 8080 &
        sleep 5
        lhci autorun --upload.target=temporary-public-storage --collect.url=http://localhost:8080
        
    - name: Performance summary
      run: |
        echo "## ⚡ 성능 테스트 결과" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "- 빌드 크기 최적화: ✅ 완료" >> $GITHUB_STEP_SUMMARY
        echo "- 웹 성능 측정: ✅ 완료" >> $GITHUB_STEP_SUMMARY
        echo "- Lighthouse 스캔: ✅ 완료" >> $GITHUB_STEP_SUMMARY
